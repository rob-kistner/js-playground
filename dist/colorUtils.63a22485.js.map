{"version":3,"sources":["js/colorUtils.js"],"names":["isColorNum","num","numToHex","color","hex","Number","toString","length","rgbToHex","r","g","b","incHash","red","green","blue","hexToRGB","asString","replace","parseInt","substring","colorTintHex","hexColor","tintAmt","colorArr","colorTintArr","map","clr","colorShadeHex","shadeAmt","colorShadeArr","makeTintsAndShades","numTints","minTint","numShades","maxShade","args","tintStep","toFixed","shadeStep","tint","t","push","arrToColorString","arr","ret","forEach","item"],"mappings":"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","file":"colorUtils.63a22485.js","sourceRoot":"../src","sourcesContent":["\n/**\n * validate a number falling within color 0-255 range\n */\nconst isColorNum = num => (num >= 0 && num <= 255)\n\n/**\n * convert regular number to rgb hex style 2-digit\n */\nconst numToHex = (color) => { \n  let hex = Number(color).toString(16)\n  if (hex.length < 2)  hex = `0${hex}`\n  return !isColorNum(color) ? false : hex\n}\n\n/**\n * convert 3 numbers to hex string,\n * includes the hash by default\n */\nconst rgbToHex = (r, g, b, incHash=true) => {   \n  var red   = numToHex(r)\n  var green = numToHex(g)\n  var blue  = numToHex(b)\n  // if (!isColorNum(red) || !isColorNum(green) || !isColorNum(blue))\n  //   return false\n  // else\n    return (incHash ? '#' : '') + red + green + blue\n}\n\n/**\n * convert hex string into rgb array\n */\nconst hexToRGB = (hex, asString=false) => {\n  hex = hex.replace('#','')\n  red   = parseInt(hex.substring(0,2), 16)\n  green = parseInt(hex.substring(2,4), 16)\n  blue  = parseInt(hex.substring(4,6), 16)\n  // if (!isColorNum(red) || !isColorNum(green) || !isColorNum(blue))\n  //   return false\n  // else\n    return asString ? \n           `rgb(${red}, ${green}, ${blue})` : \n           [red, green, blue]\n}\n\n/**\n\n  Converting a tint\n  --------------------------------------------------------------\n  #663399 is converted to the RGB equivalent of 102, 51, 153\n  R: 102 + ((255 - 102) x .1) = 117.3, rounded to 117\n  G: 51 + ((255 - 51) x .1) = 71.4, rounded to 71\n  B: 153 + ((255 - 153) x .1) = 163.2, rounded to 163\n  RGB 117, 71, 163 is converted to the hex equivalent of #7547a3\n\n  Converting a shade\n  --------------------------------------------------------------\n  #663399 is converted to the RGB equivalent of 102, 51, 153\n  R: 102 x .9 = 91.8, rounded to 92\n  G: 51 x .9 = 45.9, rounded to 46\n  B: 153 x .9 = 137.7, rounded to 138\n  RGB 92, 46, 138 is converted to the hex equivalent of #5c2e8a\n\n*/\n\nconst colorTintHex = (hexColor, tintAmt) => {\n  let colorArr = hexToRGB(hexColor)\n  const colorTintArr = colorArr.map(clr => parseInt((255 - clr) * tintAmt))\n  return rgbToHex(...colorTintArr)\n}\n\nconst colorShadeHex = (hexColor, shadeAmt) => {\n  let colorArr = hexToRGB(hexColor)\n  const colorShadeArr = colorArr.map(clr => parseInt(clr * shadeAmt))\n  return rgbToHex(...colorShadeArr)\n}\n\n/**\n * returns an array of hex tints & shades \n * of one hex color\n */\nconst makeTintsAndShades = (hex, ...args) => {\n  \n  let numTints, minTint, numShades, maxShade\n  \n  // excepts 2 args if tints & shades are equal values\n  if (args.length === 2) {\n    numTints  = args[0]\n    minTint   = args[1]\n    numShades = args[0]\n    maxShade  = 1 - args[1]\n  // excepts 4 args to define both tints & shades\n  } else if (args.length === 4) {\n    [numTints, minTint, numShades, maxShade] = args \n  // if no args passed, assuming we want a full spread \n  // of 10 shades & tints\n  } else if (args.length === 0) {\n    [numTints, minTint, numShades, maxShade] = [9, .1, 9, .9]\n  } else {\n    return false\n  }\n  \n  // the return array\n  const colorArr = []\n  \n  // calculate tint & shade step\n  const tintStep = ((1 - minTint) / numTints).toFixed(2)\n  const shadeStep = (maxShade / numShades).toFixed(2)\n\n  let tint\n  for (let t=numTints; t>0; t-=1) {\n    tint = 1 - (tintStep * t).toFixed(2)\n    colorArr.push(colorTintHex(hex, tint))\n  }\n  colorArr.push(hex)\n  \n  return colorArr\n}\n\nconst arrToColorString = (arr) => {\n  let ret = '\\n'\n  ret += '.myStyle {\\n'\n  arr.forEach(item => ret += `  color: ${item};\\n`)\n  ret += '}\\n\\n'\n  return ret\n}"]}